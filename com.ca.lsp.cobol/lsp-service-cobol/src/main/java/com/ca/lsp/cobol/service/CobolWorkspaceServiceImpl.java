/*
 * Copyright (c) 2020 Broadcom.
 *
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * Broadcom, Inc. - initial API and implementation
 *
 */
package com.ca.lsp.cobol.service;

import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;
import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;
import com.google.common.collect.Streams;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.lsp4j.CodeActionParams;
import org.eclipse.lsp4j.DidChangeConfigurationParams;
import org.eclipse.lsp4j.DidChangeWatchedFilesParams;
import org.eclipse.lsp4j.ExecuteCommandParams;
import org.eclipse.lsp4j.services.WorkspaceService;

import javax.annotation.Nonnull;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.BiConsumer;

import static com.ca.lsp.cobol.service.utils.SettingsParametersEnum.LOCAL_PATHS;
import static com.ca.lsp.core.cobol.model.ErrorCode.MISSING_COPYBOOK;
import static java.util.Optional.ofNullable;
import static java.util.concurrent.CompletableFuture.completedFuture;
import static java.util.concurrent.CompletableFuture.runAsync;
import static java.util.stream.Collectors.toList;

/**
 * This class is responsible to watch for any changes into the copybook folder and to fetch updated
 * settings coming from the client
 */
@Slf4j
@Singleton
public class CobolWorkspaceServiceImpl implements WorkspaceService {
  private DataBusBroker dataBus;
  private ClientService clientService;
  private WatchingService watchingService;

  @Inject
  public CobolWorkspaceServiceImpl(
      DataBusBroker dataBus, ClientService clientService, WatchingService watchingService) {
    this.dataBus = dataBus;
    this.clientService = clientService;
    this.watchingService = watchingService;
  }

  /**
   * Execute a command generated by {@link MyTextDocumentService#codeAction(CodeActionParams)}.
   * Return a WorkspaceEdit or null if no edits required. The list of supported commands depends on
   * {@link com.ca.lsp.core.cobol.model.ErrorCode}.
   *
   * @param params - parameters of a command to be executed
   * @return a WorkspaceEdit or null if no edits required
   */
  @Nonnull
  @Override
  public CompletableFuture<Object> executeCommand(@Nonnull ExecuteCommandParams params) {
    runAsync(executeCopybookFix(params)).whenComplete(reportExceptionIfFound(params));

    return completedFuture(null);
  }

  private Runnable executeCopybookFix(@Nonnull ExecuteCommandParams params) {
    return () -> {
      if (MISSING_COPYBOOK.name().equals(params.getCommand())) {
        rerunAnalysis();
      }
    };
  }

  /**
   * This is a notification triggered automatically when the user modify configuration settings in
   * the client
   *
   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.
   */
  @Override
  public void didChangeConfiguration(DidChangeConfigurationParams params) {
    clientService.callClient(LOCAL_PATHS.label).thenAccept(it -> updateWatchers(toStrings(it)));
  }

  private void updateWatchers(List<String> localFolders) {
    List<String> watchingFolders = watchingService.getWatchingFolders();

    watchingService.addWatchers(
        localFolders.stream().filter(it -> !watchingFolders.contains(it)).collect(toList()));

    watchingService.removeWatchers(
        watchingFolders.stream().filter(it -> !localFolders.contains(it)).collect(toList()));
    rerunAnalysis();
  }

  private List<String> toStrings(List<Object> it) {
    return it.stream()
        .map(obj -> (JsonArray) obj)
        .flatMap(Streams::stream)
        .map(JsonElement::getAsString)
        .collect(toList());
  }

  /**
   * This method triggered when the user modifies the settings in the settings.json
   *
   * @param params the object that wrap the content changed by the user in the settings.json and
   *     sent from the client to the server.
   */
  @Override
  public void didChangeWatchedFiles(@Nonnull DidChangeWatchedFilesParams params) {
    rerunAnalysis();
  }

  private void rerunAnalysis() {
    dataBus.invalidateCache();
    log.info("Cache invalidated");
    dataBus.postData(new RunAnalysisEvent());
  }

  @Nonnull
  private BiConsumer<Object, Throwable> reportExceptionIfFound(
      @Nonnull ExecuteCommandParams params) {
    return (res, ex) ->
        ofNullable(ex)
            .ifPresent(
                it ->
                    log.error(
                        "Cannot execute command " + params.getCommand() + ": " + params.toString(),
                        ex));
  }
}
