/*
 * Copyright (c) 2020 Broadcom.
 *
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * Broadcom, Inc. - initial API and implementation
 *
 */
package com.ca.lsp.cobol.service;

import com.broadcom.lsp.domain.cobol.databus.api.DataBusBroker;
import com.broadcom.lsp.domain.cobol.event.model.DataEventType;
import com.broadcom.lsp.domain.cobol.event.model.FetchedSettingsEvent;
import com.broadcom.lsp.domain.cobol.event.model.RequiredCopybookEvent;
import com.broadcom.lsp.domain.cobol.event.model.RunAnalysisEvent;
import com.ca.lsp.cobol.service.providers.SettingsProvider;
import com.google.gson.JsonPrimitive;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.lsp4j.*;
import org.eclipse.lsp4j.services.LanguageClient;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.BiConsumer;

import static com.ca.lsp.cobol.service.TextDocumentSyncType.DID_OPEN;
import static com.ca.lsp.cobol.service.utils.SettingsParametersEnum.CPY_MANAGER;
import static com.ca.lsp.cobol.service.utils.SettingsParametersEnum.LSP_PREFIX;
import static com.ca.lsp.core.cobol.model.ErrorCode.MISSING_COPYBOOK;
import static java.util.Optional.ofNullable;
import static java.util.concurrent.CompletableFuture.completedFuture;
import static java.util.concurrent.CompletableFuture.runAsync;

@Slf4j
@Singleton
public class CobolWorkspaceServiceImpl implements CobolWorkspaceService {

  private DataBusBroker dataBus;
  private Provider<LanguageClient> clientProvider;

  @Inject
  public CobolWorkspaceServiceImpl(DataBusBroker dataBus, Provider<LanguageClient> clientProvider) {
    this.dataBus = dataBus;
    this.clientProvider = clientProvider;
    dataBus.subscribe(DataEventType.REQUIRED_COPYBOOK_EVENT, this);
  }

  /**
   * Execute a command generated by {@link MyTextDocumentService#codeAction(CodeActionParams)}.
   * Return a WorkspaceEdit or null if no edits required. The list of supported commands depends on
   * {@link com.ca.lsp.core.cobol.model.ErrorCode}.
   *
   * @param params - parameters of a command to be executed
   * @return a WorkspaceEdit or null if no edits required
   */
  @Nonnull
  @Override
  public CompletableFuture<Object> executeCommand(@Nonnull ExecuteCommandParams params) {
    runAsync(
            () -> {
              if (!MISSING_COPYBOOK.name().equals(params.getCommand())) {
                return;
              }
              String copybookName = getStringArgument(params, 0);
              String documentUri = getStringArgument(params, 1);
              dataBus.postData(
                  RequiredCopybookEvent.builder()
                      .name(copybookName)
                      .documentUri(documentUri)
                      .textDocumentSyncType(DID_OPEN.name())
                      .build());
            })
        .whenComplete(reportExceptionIfFound(params));
    return completedFuture(null);
  }

  /**
   * This is a notification triggered automatically when the user modify configuration settings in
   * the client
   *
   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.
   */
  @Override
  public void didChangeConfiguration(DidChangeConfigurationParams params) {
    try {

      // provide the databus to the settings provider
      SettingsProvider.builder().databus(dataBus);
      fetchSettings(LSP_PREFIX.label + "." + CPY_MANAGER.label, null)
          .thenAccept(e -> dataBus.postData(FetchedSettingsEvent.builder().content(e).build()));
    } catch (RuntimeException e) {
      log.error(e.getMessage());
    }
  }

  /**
   * After client notifies the server that there is a setting change we need to request the client
   * those changing by sending a workspace/configuration JSON request
   *
   * @param section - The configuration section asked for.
   * @param scope - The scope to get the configuration section for.
   * @return - CompletedFuture which contains an object with the settings asked for.
   */
  private CompletableFuture<List<Object>> fetchSettings(String section, String scope) {
    ConfigurationParams params =
        new ConfigurationParams(provideConfigurationItemList(section, scope));
    return clientProvider.get().configuration(params);
  }

  @Nonnull
  private List<ConfigurationItem> provideConfigurationItemList(String section, String scope) {
    ConfigurationItem item = new ConfigurationItem();
    item.setSection(section);
    item.setScopeUri(scope);
    return Collections.singletonList(item);
  }

  @Override
  public void didChangeWatchedFiles(@Nonnull DidChangeWatchedFilesParams params) {
    dataBus.invalidateCache();
    log.info("Cache invalidated due to a copybooks file watcher was triggered");
    dataBus.postData(new RunAnalysisEvent());
  }

  // TODO: Should be removed due to a change of responsability for this class..
  @Override
  public String getContentByCopybookName(String copybookName) throws IOException {
    return null;
  }

  // TODO: Should be removed due to a change of responsability for this class..
  @Override
  public void observerCallback(RequiredCopybookEvent adaptedDataEvent) {}

  @Nullable
  private String getStringArgument(@Nonnull ExecuteCommandParams params, int index) {
    return ((JsonPrimitive) params.getArguments().get(index)).getAsString();
  }

  @Nonnull
  private BiConsumer<Object, Throwable> reportExceptionIfFound(
      @Nonnull ExecuteCommandParams params) {
    return (res, ex) ->
        ofNullable(ex)
            .ifPresent(
                it ->
                    log.error(
                        "Cannot execute command " + params.getCommand() + ": " + params.toString(),
                        ex));
  }
}
