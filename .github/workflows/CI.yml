# This is a basic workflow to help you get started with Actions

name: Native Build

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - development
      - master
  push:
    branches:
      - development
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  buildServer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '11.0.15'
          cache: 'maven'
      - name: Build with Maven
        working-directory: server
        run: mvn clean verify --no-transfer-progress
      - uses: actions/upload-artifact@v3
        with:
          name: jar
          path: server/engine/target/server.jar
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: logs
          path: server/target/*.log

  buildAndTestClient:
    runs-on: windows-latest
    needs: [buildServer]
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11.0.15'
          distribution: 'microsoft'
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'clients/cobol-lsp-vscode-extension/.nvmrc'
      - name: build client
        run: npm ci --ignore-scripts
        working-directory: clients/cobol-lsp-vscode-extension
      - name: postinstall
        run: npm run postinstall
        working-directory: clients/cobol-lsp-vscode-extension
      - name: Retrieve server jar
        uses: actions/download-artifact@v3
        with:
          path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      - name: coverage
        run: npm run coverage
        working-directory: clients/cobol-lsp-vscode-extension
      - name: integration-test
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm --prefix clients/cobol-lsp-vscode-extension run test:integration
  buildVsix:
    runs-on: ubuntu-latest
    needs: [buildAndTestClient]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'clients/cobol-lsp-vscode-extension/.nvmrc'
      - name: Retrieve native images
        uses: actions/download-artifact@v3
        with:
            path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      - name: build client
        run: npm ci
        working-directory: clients/cobol-lsp-vscode-extension
      - name: generate vsix
        working-directory: clients/cobol-lsp-vscode-extension
        run: |
          npm run package
          cp *.vsix ../../.
      - uses: actions/upload-artifact@v3
        with:
          name: vsix-package
          path: '*.vsix'

  cypress-run:
    runs-on: ubuntu-latest
    needs: [buildVsix]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'clients/cobol-lsp-vscode-extension/.nvmrc'
      - name: Download vsix file
        uses: actions/download-artifact@v3
        with:
            path: staging
      - name: make cobol-lsp plugin folder
        run: mkdir -p tests/theia/plugins
      - name: Copy vsix file
        run: cp staging/vsix-package/*.vsix tests/theia/plugins
      - name: Up theia docker image
        run:
        # Run the docker commande
          docker run -d -p 3000:3000 -v "/home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/theia/plugins":/home/theia/plugins -v "/home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/test_files/project":/home/project grianbrcom/theia-full:1.15.0
      - name: up docker image
        run: |
             docker ps
             rm -rf node_modules/ yarn.lock
             cd tests
             yarn cache clean
             yarn install --frozen-lockfile
             npm run ts:build        
      - name: Cypress run
        uses: cypress-io/github-action@v2         
        with:    
          command: npm run cy:run:ci -- --env ide=theia
          browser: chrome
          headless: true
          wait-on: 'http://localhost:3000'
          working-directory: tests
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/cypress/screenshots/LSP/*/*
      # Test run video was always captured, so this action uses "always()" condition
      # - uses: actions/upload-artifact@v2
      #   if: always()
      #   with:
      #     name: cypress-videos
      #     path: cypress/videos

