/*
 * Copyright (c) 2023 Broadcom.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Broadcom, Inc. - initial API and implementation
 *
 */
package org.eclipse.lsp.cobol.lsp;

import com.google.inject.Inject;
import com.google.inject.Singleton;

import java.util.concurrent.CompletableFuture;

import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.lsp.cobol.lsp.events.notifications.DidChangeWatchedFilesNotification;
import org.eclipse.lsp.cobol.lsp.events.queries.ExecuteCommandQuery;
import org.eclipse.lsp.cobol.lsp.handlers.workspace.DidChangeConfigurationHandler;
import org.eclipse.lsp.cobol.lsp.handlers.workspace.DidChangeWatchedFilesHandler;
import org.eclipse.lsp.cobol.lsp.handlers.workspace.ExecuteCommandHandler;
import org.eclipse.lsp4j.*;
import org.eclipse.lsp4j.services.WorkspaceService;

/**
 * This class is responsible to handle all the request events (IDE generated events and File System
 * generated events). It also watches for any changes into the copybook folder and to fetch updated
 * settings coming from the client.
 */
@Singleton
@Slf4j
public class CobolWorkspaceServiceImpl extends LspEventConsumer implements WorkspaceService {
  private final ExecuteCommandHandler executeCommandHandler;
  private final DidChangeConfigurationHandler didChangeConfigurationHandler;
  private final DidChangeWatchedFilesHandler didChangeWatchedFilesHandler;

  @Inject
  public CobolWorkspaceServiceImpl(
      LspMessageBroker lspMessageBroker,
      ExecuteCommandHandler executeCommandHandler,
      DidChangeConfigurationHandler didChangeConfigurationHandler,
      DidChangeWatchedFilesHandler didChangeWatchedFilesHandler) {
    super(lspMessageBroker);
    this.executeCommandHandler = executeCommandHandler;
    this.didChangeConfigurationHandler = didChangeConfigurationHandler;
    this.didChangeWatchedFilesHandler = didChangeWatchedFilesHandler;
  }

  /**
   * Execute a command generated by {@link CobolTextDocumentService#codeAction(CodeActionParams)}.
   * Return a WorkspaceEdit or null if no edits required. The list of supported commands depends on
   * {@link org.eclipse.lsp.cobol.common.error.ErrorCode}.
   *
   * @param params - parameters of a command to be executed
   * @return a WorkspaceEdit or null if no edits required
   */
  @NonNull
  @Override
  public CompletableFuture<Object> executeCommand(@NonNull ExecuteCommandParams params) {
    return getLspMessageBroker().query(new ExecuteCommandQuery(params, executeCommandHandler));
  }

  /**
   * Process changed configuration on the client state. This notification triggered automatically
   * when the user modify configuration settings in the client. Invalidate all the caches to avoid
   * dirty state.
   *
   * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.
   */
  @Override
  public void didChangeConfiguration(DidChangeConfigurationParams params) {
    getLspMessageBroker()
        .notify(() -> didChangeConfigurationHandler.didChangeConfiguration(params));
  }

  /**
   * This method triggered when the user modifies the settings in the settings.json
   *
   * @param params the object that wrap the content changed by the user in the settings.json and
   *     sent from the client to the server.
   */
  @Override
  public void didChangeWatchedFiles(@NonNull DidChangeWatchedFilesParams params) {
    getLspMessageBroker()
        .notify(new DidChangeWatchedFilesNotification(params, didChangeWatchedFilesHandler));
  }
}
