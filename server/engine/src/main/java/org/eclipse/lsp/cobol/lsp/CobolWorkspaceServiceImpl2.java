/*
 * Copyright (c) 2023 Broadcom.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Broadcom, Inc. - initial API and implementation
 *
 */
package org.eclipse.lsp.cobol.lsp;


import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.lsp.cobol.lsp.events.queries.ExecuteCommandQuery;
import org.eclipse.lsp.cobol.lsp.handlers.workspace.ExecuteCommandHandler;
import org.eclipse.lsp4j.CodeActionParams;
import org.eclipse.lsp4j.DidChangeConfigurationParams;
import org.eclipse.lsp4j.DidChangeWatchedFilesParams;
import org.eclipse.lsp4j.ExecuteCommandParams;
import org.eclipse.lsp4j.services.WorkspaceService;

/**
 * This class is responsible to handle all the request events (IDE generated events and File System generated events).
 * It also watches for any changes into the copybook folder and to fetch updated
 * settings coming from the client.
 */
@Singleton
@Slf4j
public class CobolWorkspaceServiceImpl2 extends LspEventConsumer implements WorkspaceService {
    private final ExecuteCommandHandler executeCommandHandler;
    
    @Inject
    public CobolWorkspaceServiceImpl2(LspMessageBroker lspMessageBroker, ExecuteCommandHandler executeCommandHandler) {
        super(lspMessageBroker);
        this.executeCommandHandler = executeCommandHandler;
    }

    /**
     * Execute a command generated by {@link CobolTextDocumentService#codeAction(CodeActionParams)}.
     * Return a WorkspaceEdit or null if no edits required. The list of supported commands depends on
     * {@link org.eclipse.lsp.cobol.common.error.ErrorCode}.
     *
     * @param params - parameters of a command to be executed
     * @return a WorkspaceEdit or null if no edits required
     */
    @NonNull
    @Override
    public CompletableFuture<Object> executeCommand(@NonNull ExecuteCommandParams params) {
        return getLspMessageBroker().query(new ExecuteCommandQuery(params, executeCommandHandler));
    }

    /**
     * Process changed configuration on the client state. This notification triggered automatically
     * when the user modify configuration settings in the client. Invalidate all the caches to avoid
     * dirty state.
     *
     * @param params - LSPSpecification -> The actual changed settings; Actually -> null all the time.
     */
    @Override
    public void didChangeConfiguration(DidChangeConfigurationParams params) {
//        getLspMessageBroker().query(() -> {
//            didChangeConfigurationHandler.didChangeConfiguration(params);
//            return null;
//        });
    }

    /**
     * This method triggered when the user modifies the settings in the settings.json
     *
     * @param params the object that wrap the content changed by the user in the settings.json and
     *               sent from the client to the server.
     */
    @Override
    public void didChangeWatchedFiles(@NonNull DidChangeWatchedFilesParams params) {
//        dirtyCacheHandlerService.handleDirtyCache();
    }

}
