<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright (c) 2020 Broadcom.
~
~ The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
~
~ This program and the accompanying materials are made
~ available under the terms of the Eclipse Public License 2.0
~ which is available at https://www.eclipse.org/legal/epl-2.0/
~
~ SPDX-License-Identifier: EPL-2.0
~
~ Contributors:
~ Broadcom, Inc. - initial API and implementation
~
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>engine</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>COBOL LSP :: Server</name>

    <parent>
        <groupId>org.eclipse.lsp.cobol</groupId>
        <artifactId>server</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <properties>
        <antlr.version>4.7.1</antlr.version>
        <awaitility.version>3.0.0</awaitility.version>
        <commons.io.version>2.10.0</commons.io.version>
        <commons.lang.version>3.12.0</commons.lang.version>
        <commons.text.version>1.10.0</commons.text.version>
        <concurrentunit.version>0.4.6</concurrentunit.version>
        <exclude.tests>nothing.to.exclude</exclude.tests>
        <google.guava.version>32.0.1-jre</google.guava.version>
        <guice.version>4.2.2</guice.version>
        <java.version>8</java.version>
        <junit-jupiter.version>5.6.0</junit-jupiter.version>
        <junit.platform.version>1.6.0</junit.platform.version>
        <logback.classic.version>1.3.14</logback.classic.version>
        <lombok.version>1.18.30</lombok.version>
        <lsp4j.version>0.14.0</lsp4j.version>
        <picocli.version>4.7.5</picocli.version>
        <maven.antlr4.plugin.version>4.7</maven.antlr4.plugin.version>
        <maven.assembly.plugin.version>3.2.0</maven.assembly.plugin.version>
        <maven.cobertura.plugin.version>2.7</maven.cobertura.plugin.version>
        <maven.compiler.plugin.version>3.7.0</maven.compiler.plugin.version>
        <maven.coveralls.plugin.version>4.3.0</maven.coveralls.plugin.version>
        <maven.jacoco.plugin.version>0.8.11</maven.jacoco.plugin.version>
        <maven.resources.plugin.version>3.0.2</maven.resources.plugin.version>
        <maven.surefire.plugin.version>3.0.0-M3</maven.surefire.plugin.version>
        <mockito.core.version>5.10.0</mockito.core.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <slf4j.api.version>2.0.9</slf4j.api.version>
        <maven.checkstyle.plugin.version>3.1.1</maven.checkstyle.plugin.version>
        <filesToTestPath>${project.basedir}${file.separator}..${file.separator}..${file.separator}tests${file.separator}test_files</filesToTestPath>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.eclipse.lsp.cobol</groupId>
            <artifactId>common</artifactId>
            <version>${dialect.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.lsp.cobol</groupId>
            <artifactId>parser</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.lsp.cobol</groupId>
            <artifactId>test</artifactId>
            <scope>test</scope>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4</artifactId>
            <version>${antlr.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>${antlr.version}</version>
        </dependency>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-maven-plugin</artifactId>
            <scope>provided</scope>
            <version>${antlr.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.sonatype.sisu</groupId>
                    <artifactId>sisu-guice</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.eclipse.lsp4j</groupId>
            <artifactId>org.eclipse.lsp4j</artifactId>
            <version>${lsp4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.lsp4j</groupId>
            <artifactId>org.eclipse.lsp4j.jsonrpc</artifactId>
            <version>${lsp4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>aopalliance</groupId>
                    <artifactId>aopalliance</artifactId>
                </exclusion>
            </exclusions>
            <classifier>no_aop</classifier>
        </dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-assistedinject</artifactId>
            <version>${guice.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>aopalliance</groupId>
                    <artifactId>aopalliance</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${google.guava.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.checkerframework</groupId>
                    <artifactId>checker-qual</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>${commons.text.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <dependency>
            <groupId>net.jodah</groupId>
            <artifactId>concurrentunit</artifactId>
            <version>${concurrentunit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>${awaitility.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.api.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.classic.version}</version>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
            <version>${picocli.version}</version>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli-codegen</artifactId>
            <version>${picocli.version}</version>
        </dependency>
    </dependencies>


    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/antlr4</directory>
                <excludes>
                    <exclude>**</exclude>
                </excludes>
                <includes>
                    <include>*.tokens</include>
                </includes>
            </resource>
            <resource>
                <directory>src/test/antlr4</directory>
                <excludes>
                    <exclude>**</exclude>
                </excludes>
                <includes>
                    <include>*.tokens</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven.assembly.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <finalName>server</finalName>
                            <archive>
                                <manifest>
                                    <mainClass>org.eclipse.lsp.cobol.LangServerBootstrap</mainClass>
                                </manifest>
                            </archive>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <parallel>all</parallel>
                    <argLine>${argLine} -Dperformance.log.path=${project.build.directory}/perf.csv</argLine>
                    <systemPropertyVariables>
                        <property>
                            <name>filesToTestPath</name>
                            <!--suppress UnresolvedMavenProperty -->
                            <value>${filesToTestPath}</value>
                        </property>
                        <property>
                            <name>listingSnap</name>
                            <!--suppress UnresolvedMavenProperty -->
                            <value>${listingSnap}</value>
                        </property>
                    </systemPropertyVariables>
                    <excludes>
                        <exclude>**/org/eclipse/lsp/cobol/dialects/**/*</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${maven.cobertura.plugin.version}</version>
                <configuration>
                    <format>xml</format>
                    <maxmem>256m</maxmem>
                    <aggregate>true</aggregate>
                    <instrumentation>
                        <includes>
                            <include>org/eclipse/lsp/**/*.class</include>
                        </includes>
                    </instrumentation>
                    <check/>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>${maven.coveralls.plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.plugin.version}</version>
                <configuration>
                    <excludes>
                        <exclude>**/generated-sources/**/*</exclude>
                        <exclude>**/generated-test-sources/**/*</exclude>
                        <exclude>**/org/eclipse/lsp/cobol/core/parser/**/*</exclude>
                        <exclude>**/org/eclipse/lsp/cobol/domain/modules/**/*</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>coverage-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>coverage-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-maven-plugin</artifactId>
                <version>${maven.antlr4.plugin.version}</version>
                <executions>
                    <execution>
                        <id>build UseCasePreprocessor</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                        <configuration>
                            <generateTestSources>true</generateTestSources>
                            <arguments>
                                <argument>-package</argument>
                                <argument>org.eclipse.usecase</argument>
                                <argument>-o</argument>
                                <argument>${basedir}/target/generated-sources/antlr4/org/eclipse/usecase</argument>
                            </arguments>
                            <sourceDirectory>src/test/antlr4/org/eclipse/usecase</sourceDirectory>
                            <listener>true</listener>
                            <visitor>false</visitor>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run antlr</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                        <configuration>
                            <arguments>
                                <argument>-package</argument>
                                <argument>org.eclipse.lsp.cobol.core</argument>
                                <argument>-o</argument>
                                <argument>${project.build.directory}/generated-sources/antlr4/org/eclipse/lsp/cobol/core</argument>
                            </arguments>
                            <sourceDirectory>src/main/antlr4/org/eclipse/lsp/cobol/core/parser</sourceDirectory>
                            <listener>true</listener>
                            <visitor>true</visitor>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run cics antlr</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                        <configuration>
                            <arguments>
                                <argument>-package</argument>
                                <argument>org.eclipse.lsp.cobol.implicitDialects.cics</argument>
                                <argument>-o</argument>
                                <argument>
                                    ${project.build.directory}/generated-sources/antlr4/org/eclipse/lsp/cobol/implicitDialects/cics
                                </argument>
                            </arguments>
                            <sourceDirectory>src/main/antlr4/org/eclipse/lsp/cics/parser</sourceDirectory>
                            <listener>true</listener>
                            <visitor>true</visitor>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run sql antlr</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                        <configuration>
                            <arguments>
                                <argument>-package</argument>
                                <argument>org.eclipse.lsp.cobol.implicitDialects.sql</argument>
                                <argument>-o</argument>
                                <argument>
                                    ${project.build.directory}/generated-sources/antlr4/org/eclipse/lsp/cobol/implicitDialects/sql
                                </argument>
                            </arguments>
                            <sourceDirectory>src/main/antlr4/org/eclipse/lsp/db2/parser</sourceDirectory>
                            <listener>true</listener>
                            <visitor>true</visitor>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven.checkstyle.plugin.version}</version>
                <configuration>
                    <configLocation>src/style/checkstyle.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <linkXRef>false</linkXRef>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.antlr</groupId>
                                        <artifactId>antlr4-maven-plugin</artifactId>
                                        <versionRange>[4.0,)</versionRange>
                                        <goals>
                                            <goal>antlr4</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute>
                                            <runOnIncremental>true</runOnIncremental>
                                        </execute>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

    </build>
    <profiles>
        <profile>
            <id>native</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>0.9.15</version>
                        <extensions>true</extensions>
                        <executions>
                            <execution>
                                <id>build-native</id>
                                <goals>
                                    <goal>compile-no-fork</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <mainClass>org.eclipse.lsp.cobol.LangServerBootstrap</mainClass>
                            <buildArgs>
                                <buildArg>-H:+ReportExceptionStackTraces</buildArg>
                                <buildArg>--allow-incomplete-classpath</buildArg>
                                <buildArg>--report-unsupported-elements-at-runtime</buildArg>
                                <buildArg>--verbose</buildArg>
                                <buildArg>--no-fallback</buildArg>
                            </buildArgs>
                            <agent>
                                <options>
                                    <option>access-filter-file=${basedir}/src/test/resources/access-filter.json</option>
                                    <option>experimental-class-loader-support</option>
                                </options>
                            </agent>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>linux-native</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>0.9.13</version>
                        <extensions>true</extensions>
                        <executions>
                            <execution>
                                <id>build-native</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <mainClass>org.eclipse.lsp.cobol.LangServerBootstrap</mainClass>
                            <buildArgs>
                                <buildArg>--static</buildArg>
                                <buildArg>--libc=musl</buildArg>
                                <buildArg>-H:+ReportExceptionStackTraces</buildArg>
                                <buildArg>--allow-incomplete-classpath</buildArg>
                                <buildArg>--report-unsupported-elements-at-runtime</buildArg>
                                <buildArg>--verbose</buildArg>
                                <buildArg>--no-fallback</buildArg>
                            </buildArgs>
                            <agent>
                                <options>
                                    <option>access-filter-file=${basedir}/src/test/resources/access-filter.json</option>
                                    <option>experimental-class-loader-support</option>
                                </options>
                            </agent>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${maven.cobertura.plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cobertura</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

</project>