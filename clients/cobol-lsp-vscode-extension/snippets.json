{
    "add": {
        "prefix": "add",
        "body": [
            "add ${1:a} to ${2:b} giving ${3:c}"
        ],
        "description": "Add a to b giving c",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ADD": {
        "prefix": "ADD",
        "body": [
            "ADD ${1:a} TO ${2:b} GIVING ${3:c}"
        ],
        "description": "Add a to b giving c",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ADD id TO id": {
        "prefix": "ADD id TO id",
        "body": [
            "ADD ${1:id|lit} TO ${2:id}"
        ],
        "description": "Add literal to id",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ADD CORRESPONDING": {
        "prefix": "ADD CORRESPONDING",
        "body": [
            "ADD CORR ${1:id} TO ${2:id}"
        ],
        "description": "ADD CORRESPONDING is used to add the corresponding variables or fiels in two identical group variables",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "accept": {
        "prefix": "accept variable",
        "body": [
            "accept ${1:variable}",
            "$0"
        ],
        "description": "Accept variable",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ACCEPT": {
        "prefix": "ACCEPT VARIABLE",
        "body": [
            "ACCEPT ${1:variable}",
            "$0"
        ],
        "description": "Accept variable",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "accept from": {
        "prefix": "accept",
        "body": [
            "accept ${1:variable} ${2|from date,from day,from day-of-week,time|}",
            "$0"
        ],
        "description": "accept from date/day/week/time",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ACCEPT FROM": {
        "prefix": "ACCEPT",
        "body": [
            "ACCEPT ${1:variable} ${2|FROM DATE,FROM DAY,FROM DAY-OF-WEEK,TIME|}",
            "$0"
        ],
        "description": "ACCEPT FROM DATE/DAY/WEEK/TIME",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ACCEPT id": {
        "prefix": "ACCEPT id",
        "body": [
            "ACCEPT ${1:id}",
            "$0"
        ],
        "description": "ACCEPT id",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "accept id": {
        "prefix": "accept id",
        "body": [
            "accept ${1:id}",
            "$0"
        ],
        "description": "accept id",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ADDRESS OF": {
        "prefix": "ADDRESS OF",
        "body": [
            "ADDRESS OF ${1:id}"
        ],
        "description": "The ADDRESS OF special register references the address of a data item in the linkage section, the local-storage section, or the working-storage section.",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "AFTER FROM": {
        "prefix": "AFTER FROM",
        "body": [
            "AFTER ${1:item} FROM ${2:item}"
        ],
        "description": "AFTER FROM",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "AFTER id": {
        "prefix": "AFTER id",
        "body": [
            "AFTER ${1:item} FROM ${2:item}"
        ],
        "description": "AFTER item FROM 2:item",
        "scope": "cobol"
    },
    "ALL BY": {
        "prefix": "ALL id BY id",
        "body": [
            "ALL ${1:id|lit} BY ${2:id|lit}"
        ],
        "description": "ALL id BY id",
        "scope": "cobol"
    },
    "ALLOCATE": {
        "prefix": "ALLOCATE item",
        "body": [
            "ALLOCATE ${1:arithExp|dataName}"
        ],
        "description": "ALLOCATE item",
        "scope": "cobol"
    },
    "ALSO": {
        "prefix": "ALSO item",
        "body": [
            "ALSO ${1:id|lit|exp|TRUE|FALSE}"
        ],
        "description": "ALSO id|dlit|exp|TRUE|FALSE}",
        "scope": "cobol"
    },
    "ALTER TO": {
        "prefix": "ALTER TO",
        "body": [
            "ALTER ${1:procName-1} TO ${2:procName-2}"
        ],
        "description": "ALTER TO",
        "scope": "cobol"
    },
    "ASCENDING": {
        "prefix": "ASCENDING",
        "body": [
            "ASCENDING ${1:item}"
        ],
        "description": "ASCENDING item",
        "scope": "cobol"
    },
    "BEFORE": {
        "prefix": "BEFORE",
        "body": [
            "BEFORE ${1:id|lit}"
        ],
        "description": "BEFORE literal",
        "scope": "cobol"
    },
    "BY": {
        "prefix": "BY",
        "body": [
            "BY ${1:item}"
        ],
        "description": "BY item",
        "scope": "cobol"
    },
    "BY UNTIL": {
        "prefix": "BY UNTIL",
        "body": [
            "BY ${1:item} UNTIL ${2:condition}"
        ],
        "description": "BY item UNTIL condition",
        "scope": "cobol"
    },
    "CHARACTERS BY": {
        "prefix": "CHARACTERS BY",
        "body": [
            "CHARACTERS BY ${1:id|lit}"
        ],
        "description": "CHARACTERS BY literal",
        "scope": "cobol"
    },
    "CALL": {
        "prefix": "CALL",
        "body": [
            "CALL \"$1\" USING",
            "    BY ${2|VALUE,REFERENCE,CONTENT|} ${3:IDENTIFER}",
            "    RETURNING ${4:RETURN-CODE}",
            "END-CALL",
            "$0"
        ],
        "description": "CALL literal"
    },
    "cancel": {
        "prefix": "cancel",
        "body": [
            "cancel ${1:id|lit}",
            "$0"
        ],
        "description": "CANCEL literal"
    },
    "CANCEL": {
        "prefix": "CANCEL",
        "body": [
            "CANCEL ${1:id|lit}",
            "$0"
        ],
        "description": "CANCEL literal"
    },
    "CLOSE": {
        "prefix": "CLOSE",
        "body": [
            "CLOSE $(1:fileName}"
        ],
        "description": "CLOSE fileName",
        "scope": "cobol"
    },
    "COMPUTE EQUAL": {
        "prefix": "COMPUTE EQUAL",
        "body": [
            "COMPUTE ${1:id} EQUAL ${2:arithExp}"
        ],
        "description": "COMPUTE id EQUAL arithExp",
        "scope": "cobol"
    },
    "CONTENT": {
        "prefix": "CONTENT",
        "body": [
            "CONTENT ${1:id}"
        ],
        "description": "CONTENT id",
        "scope": "cobol"
    },
    "CONVERTING": {
        "prefix": "CONVERTING",
        "body": [
            "CONVERTING ${1:item}"
        ],
        "description": "CONVERTING item",
        "scope": "cobol"
    },
    "CORR": {
        "prefix": "CORR",
        "body": [
            "CORR ${1:id}"
        ],
        "description": "CORR id",
        "scope": "cobol"
    },
    "COUNT IN": {
        "prefix": "COUNT IN",
        "body": [
            "COUNT IN ${1:id}"
        ],
        "description": "COUNT IN id",
        "scope": "cobol"
    },
    "copy": {
        "prefix": "copy",
        "body": [
            "copy \"${1:subprog.cpy}\"",
            "    replacing ==${2:()}== by ==${3:lnk-}==."
        ],
        "description": "Copy replacing",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "COPY": {
        "prefix": "COPY",
        "body": [
            "COPY \"${1:SUBPROG.CPY}\"",
            "    REPLACING ==${2:()}== BY ==${3:lnk-}==."
        ],
        "description": "COPY REPLACING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "data division": {
        "prefix": "data-division",
        "body": [
            "data division.",
            "$0"
        ],
        "scope": "cobol"
    },
    "DATA DIVISION": {
        "prefix": "DATA-DIVISION",
        "body": [
            "DATA DIVISION.",
            "$0"
        ]
    },
    "DATE": {
        "prefix": "DATE",
        "body": [
            "DATE ${1:yyyymmdd}"
        ],
        "description": "DATE yyyymmdd",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DAY": {
        "prefix": "DAY",
        "body": [
            "DAY ${1:yyyyddd}"
        ],
        "description": "DAY yyyyddd",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DELETE": {
        "prefix": "DELETE fileName",
        "body": [
            "DELETE ${1:fileName}"
        ],
        "description": "DELETE fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DELIMITED BY": {
        "prefix": "DELIMITED BY",
        "body": [
            "DELIMITED BY ${1:item}"
        ],
        "description": "DELIMITED BY item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DELIMITER": {
        "prefix": "DELIMITER",
        "body": [
            "DELIMITER ${1:item}"
        ],
        "description": "DELIMITED BY",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DESCENDING": {
        "prefix": "DESCENDING item",
        "body": [
            "DESCENDING ${1:item}"
        ],
        "description": "DESCENDING item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "divide": {
        "prefix": "divide",
        "body": [
            "divide ${1:a} by ${2:b} giving ${3:c} ${4:remainder ${5:d}}"
        ],
        "description": "divide a by b giving [remainder}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DIVIDE": {
        "prefix": "DIVIDE",
        "body": [
            "DIVIDE ${1:a} BY ${2:b} GIVING ${3:c} ${4:REMAINDER ${5:d}}"
        ],
        "description": "DIVIDE a BY b GIVING [REMAINDER}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DIVIDE BY GIVING": {
        "prefix": "DIVIDE BY GIVING",
        "body": [
            "DIVIDE ${1:id|lit} BY ${2:id|lit} GIVING ${3:id}"
        ],
        "description": "DIVIDE BY GIVING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DIVIDE INTO": {
        "prefix": "DIVIDE INTO",
        "body": [
            "DIVIDE ${1:id|lit} INTO ${2:id}"
        ],
        "description": "DIVIDE INTO",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DIVIDE INTO GIVING": {
        "prefix": "DIVIDE INTO GIVING",
        "body": [
            "DIVIDE ${1:id|lit} INTO ${2:id|lit} GIVING ${3:id}"
        ],
        "description": "DIVIDE INTO GIVING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "DIVIDE INTO GIVING REMAINDER": {
        "prefix": "DIVIDE INTO GIVING REMAINDER",
        "body": [
            "DIVIDE INTO GIVING REMAINDER=DIVIDE ${1:id|lit} INTO ${2:id|lit} GIVING ${3:id} REMAINDER ${4:id4}"
        ],
        "description": "DIVIDE INTO GIVING REMAINDER=DIVIDE ${1:id|lit} INTO ${2:id|lit} GIVING ${3:id} REMAINDER ${4:id4}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "display": {
        "prefix": "display",
        "body": [
            "display ${1:id|lit}"
        ],
        "description": "display literal",
        "scope": "cobol"
    },
    "DISPLAY": {
        "prefix": "DISPLAY",
        "body": [
            "DISPLAY ${1:id|lit}"
        ],
        "description": "DISPLAY literal",
        "scope": "cobol"
    },
    "DOWN BY": {
        "prefix": "DOWN BY",
        "body": [
            "DOWN BY ${1:item}"
        ],
        "description": "DOWN BY item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "environment division": {
        "prefix": "environment-division",
        "body": [
            "environment division.",
            "$0"
        ]
    },
    "ENVIRONMENT DIVISION": {
        "prefix": "ENVIRONMENT-DIVISION",
        "body": [
            "ENVIRONMENT DIVISION.",
            "$0"
        ]
    },
    "entry": {
        "prefix": "entry",
        "body": [
            "$1-ep section.",
            "entry \"$1\".",
            "    $0\t",
            "    goback.",
            ""
        ],
        "description": "entry statement",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ENTRY": {
        "prefix": "ENTRY",
        "body": [
            "$1-EP SECTON.",
            "ENTRY \"$1\".",
            "    $0\t",
            "    GOBACK.",
            ""
        ],
        "description": "ENTRY statement",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "ENCODING": {
        "prefix": "ENCODING item",
        "body": [
            "ENCODING ${1:item}"
        ],
        "description": "ENCODING item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "END-OF-PAGE": {
        "prefix": "END-OF-PAGE",
        "body": [
            "END-OF-PAGE ${1:item}"
        ],
        "description": "END-OF-PAGE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "EQUAL": {
        "prefix": "EQUAL",
        "body": [
            "EQUAL ${1:item} ${2:item}"
        ],
        "description": "EQUAL two items",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "EXTEND": {
        "prefix": "EXTEND",
        "body": [
            "EXTEND ${1:fileName}"
        ],
        "description": "EXTEND fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "EXCEPTION": {
        "prefix": "EXCEPTION",
        "body": [
            "EXCEPTION ${1:impStat}"
        ],
        "description": "EXCEPTION impStat",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "exit program": {
        "prefix": "exit",
        "body": [
            "exit program returning ${1:item}"
        ],
        "description": "EXIT PROGRAM"
    },
    "EXIT PROGRAM": {
        "prefix": "EXIT",
        "body": [
            "EXIT PROGRAM RETURNING ${1:item}"
        ],
        "description": "EXIT PROGRAM"
    },
    "exec-sql": {
        "prefix": "exec-sql",
        "body": [
            "exec sql ${1:sql-statement} end-exec."
        ],
        "description": "exec sql statement",
        "scope": "cobol,acucobol"
    },
    "EXEC-SQL": {
        "prefix": "EXEC-SQL",
        "body": [
            "EXEC SQL ${1:SQL-STATEMENT} END-EXEC."
        ],
        "description": "EXEC SQL STATEMENT",
        "scope": "cobol,acucobol"
    },
    "exec-sql-include": {
        "prefix": "exec-sql-include",
        "body": [
            "exec sql include ${1:sqlstatement.cpy} end-exec."
        ],
        "description": "exec sql include",
        "scope": "cobol,acucobol"
    },
    "EXEC-SQL-INCLUDE": {
        "prefix": "EXEC-SQL-INCLUDE",
        "body": [
            "EXEC SQL INCLUDE ${1:sqlstatement.cpy} END-EXEC."
        ],
        "description": "EXEC SQL INCLUDE",
        "scope": "cobol,acucobol"
    },
    "exec-cics": {
        "prefix": "exec-cics",
        "body": [
            "exec cics ${1:cics-statement} end-exec."
        ],
        "description": "exec cics statement",
        "scope": "cobol,acucobol"
    },
    "EXEC-CICS": {
        "prefix": "EXEC-CICS",
        "body": [
            "EXEC CICS ${1:CICS-STATEMENT} END-EXEC."
        ],
        "description": "EXEC CICS STATEMENT",
        "scope": "cobol,acucobol"
    },
    "evaluate": {
        "prefix": "evaluate",
        "body": [
            "evaluate $1",
            "    when $2",
            "       $0",
            "    when other",
            "       continue",
            "end-evaluate",
            ""
        ],
        "description": "evaluate",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "EVALUATE": {
        "prefix": "EVALUATE ",
        "body": [
            "EVALUATE $1",
            "    WHEN $2",
            "       $0",
            "    WHEN OTHER",
            "       CONTINUE",
            "END-EVALUATE",
            ""
        ],
        "description": "EVALUATE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-abs": {
        "prefix":
        "function-abs"
    ,
        "body": [
            "function abs(${1:number})$0"
        ],
        "description": "function absolute value of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FILE": {
        "prefix": "FILE",
        "body": [
            "FILE ${1:item}"
        ],
        "description": "FILE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FIRST": {
        "prefix": "FIRST",
        "body": [
            "FIRST ${1:id|lit} BY ${2:id|lit}"
        ],
        "description": "FIRST ${1:id|lit} BY ${2:id|lit}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FOR": {
        "prefix": "FOR",
        "body": [
            "FOR ${1:item}"
        ],
        "description": "FOR ${1:item}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FROM": {
        "prefix": "FROM",
        "body": [
            "FROM ${1:item}"
        ],
        "description": "FROM ${1:item}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FREE": {
        "prefix": "FREE",
        "body": [
            "FREE ${1:dataName}"
        ],
        "description": "FREE ${1:dataName}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-acos": {
        "prefix":
        "function-acos"
    ,
        "body": [
            "function acos(${1:cosine})$0"
        ],
        "description": "function trigonometric arc-cosine, or inverse cosine, of cosine",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-annuity": {
        "prefix":
        "function-annuity"
    ,
        "body": [
            "function annuity(${1:interest-rate},${2:number-of-periods})$0"
        ],
        "description": "function annuity",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-asin": {
        "prefix":
        "function-asin"
    ,
        "body": [
            "function asin(${1:sine})$0"
        ],
        "description": "function trigonometric arc-sine, or inverse sine, of sine",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-atan": {
        "prefix":
        "function-atan"
    ,
        "body": [
            "function atan(${1:tangent})$0"
        ],
        "description": "function trigonometric arc-tangent, or inverse tangent, of tangent",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-bit-of": {
        "prefix":
        "function-bit-of"
    ,
        "body": [
            "function bit-of(${1:integer})$0"
        ],
        "description": "function to convert the argument to bits",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-bit-to-char": {
        "prefix":
        "function-bit-to-char"
    ,
        "body": [
            "function bit-to-char(${1:integer})$0"
        ],
        "description": "function to convert bits to character",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-byte-length": {
        "prefix":
        "function-byte-length"
    ,
        "body": [
            "function byte-length(${1:integer})$0"
        ],
        "description": "function byte-length (in bytes) of item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-char": {
        "prefix":
        "function-char"
    ,
        "body": [
            "function char(${1:integer})$0"
        ],
        "description": "function character in the ordinal position specified by integer, from the current alphanumeric collating sequence",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-cos": {
        "prefix":
        "function-cos"
    ,
        "body": [
            "function cos(${1:angle})$0"
        ],
        "description": "function trigonometric cosine of angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-currency-symbol": {
        "prefix":
        "function-currency-symbol"
    ,
        "body": [
            "function currency-symbol()$0"
        ],
        "description": "function currency symbol character currently in effect for the locale under which the program is running",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-current-date": {
        "prefix":
        "function-current-date"
    ,
        "body": [
            "function current-date(${1:date-and-time-format})$0"
        ],
        "description": "function current date and time as 21-character value",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-date-of-integer": {
        "prefix":
        "function date-of-integer"
    ,
        "body": [
            "function date-of-integer(${1:integer})$0"
        ],
        "description": "function to convert the integer date to standard date format",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-date-to-yyyymmdd": {
        "prefix":
        "function-date-to-yyyymmdd"
    ,
        "body": [
            "function date--to-yyyymmdd(${1:integer},${2:integer})$0"
        ],
        "description": "function to convert a date with a 2 digit year to a 4 digit year",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-day-of-integer": {
        "prefix":
        "function-day-of-integer"
    ,
        "body": [
            "function day-of-integer(${1:integer})$0"
        ],
        "description": "function to convert the integer date to number of days in the gregorian calendar",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-day-to-yyyyddd": {
        "prefix":
        "function-day-to-yyyyddd"
    ,
        "body": [
            "function date--to-yyyyddd(${1:integer},${2:integer})$0"
        ],
        "description": "function to convert a date with a 2 digit year to a 4 digit year",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-display-of": {
        "prefix":
        "function-display-of"
    ,
        "body": [
            "function display-of(${1:string},${2:integer})$0"
        ],
        "description": "function to convert an alphanumeric string using a codepage",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-exp": {
        "prefix":
        "function-exp"
    ,
        "body": [
            "function exp(${1:integer})$0"
        ],
        "description": "function to return e raised to the power of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-exp10": {
        "prefix":
        "function-exp10"
    ,
        "body": [
            "function exp10(${1:integer})$0"
        ],
        "description": "function to return 10 raised to the power of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-factorial": {
        "prefix":
        "function-factorial"
    ,
        "body": [
            "function factorial(${1:integer})$0"
        ],
        "description": "function to return the factorial of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-hex-of": {
        "prefix":
        "function-hex-of"
    ,
        "body": [
            "function hex-of(${1:variable})$0"
        ],
        "description": "function to return hexadecimal representation of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-hex-to-char": {
        "prefix":
        "function-hex-to-char"
    ,
        "body": [
            "function hex-to-char(${1:variable})$0"
        ],
        "description": "function to return a character string that is a hexadecimal representation of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-integer": {
        "prefix":
        "function-integer"
    ,
        "body": [
            "function integer(${1:number})$0"
        ],
        "description": "greatest integer value that is less than or equal to number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-integer-of-date": {
        "prefix":
        "function-integer-of-date"
    ,
        "body": [
            "function integer-of-date(${1:yyyymmdd})$0"
        ],
        "description": "converts yyyymmdd to an internal integer-date",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-integer-of-day": {
        "prefix":
        "function-integer-of-day"
    ,
        "body": [
            "function integer-of-day(${1:yyyymmdd})$0"
        ],
        "description": "converts yyyymmdd to an internal integer-day",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-integer-part": {
        "prefix":
        "function-integer-part"
    ,
        "body": [
            "function integer-part(${1:number})$0"
        ],
        "description": "portion of number that occurs to the left of the decimal point",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-length": {
        "prefix":
        "function-length"
    ,
        "body": [
            "function length(${1:item})$0"
        ],
        "description": "returns the length (in character positions) of the specified item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-log": {
        "prefix":
        "function-log"
    ,
        "body": [
            "function log(${1:number})$0"
        ],
        "description": "format base e logarithm of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-log10": {
        "prefix":
        "function-log10"
    ,
        "body": [
            "function log10(${1:number})$0"
        ],
        "description": "format base 10 logarithm of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-lowercase": {
        "prefix":
        "function-lowercase"
    ,
        "body": [
            "function lowercase(${1:string})$0"
        ],
        "description": "character string that contains string with any uppercase letters replaced by their corresponding lowercase letters",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-max": {
        "prefix":
        "function-max"
    ,
        "body": [
            "function max(${1:number},${2:...})$0"
        ],
        "description": "Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-mean": {
        "prefix":
        "function-mean"
    ,
        "body": [
            "function mean(${1:number},${2:...})$0"
        ],
        "description": "statistical mean value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-median": {
        "prefix":
        "function-median"
    ,
        "body": [
            "function median(${1:number},${2:...})$0"
        ],
        "description": "statistical median value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-midrange": {
        "prefix":
        "function-midrange"
    ,
        "body": [
            "function midrange(${1:number},${2:...})$0"
        ],
        "description": "statistical midrange value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-min": {
        "prefix":
        "function-min"
    ,
        "body": [
            "function min(${1:number},${2:...})$0"
        ],
        "description": "statistical min value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-mod": {
        "prefix":
        "function-mod"
    ,
        "body": [
            "function mod(${1:value},${2:modulus})$0"
        ],
        "description": "remainder from the division of value by modulus",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-national-of": {
        "prefix":
        "function-national-of"
    ,
        "body": [
            "function national-of(${1:alphanumeric-string},${2:replacement-char})$0"
        ],
        "description": "convert alphanumeric-string to the national coded character set representation",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-numval": {
        "prefix":
        "function-numval"
    ,
        "body": [
            "function numval(${1:string})$0"
        ],
        "description": "corresponding numeric value for string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-numval-c": {
        "prefix":
        "function-numval-c"
    ,
        "body": [
            "function numval-c(${1:string},${2:currency-symbol}${3:,ANYCASE})$0"
        ],
        "description": "corresponding numeric value for string, case-sensitive if ANYCASE not given",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-numval-f": {
        "prefix":
        "function-numval-f"
    ,
        "body": [
            "function numval-f(${1:string})$0"
        ],
        "description": "corresponding numeric value for floating-point-string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-ord": {
        "prefix":
        "function-ord"
    ,
        "body": [
            "function ord(${1:char},${2:...})$0"
        ],
        "description": "ordinal position in the program character set corresponding to char",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-ord-max": {
        "prefix":
        "function-ord-max"
    ,
        "body": [
            "function ord-max(${1:char},${2:...})$0"
        ],
        "description": "max. ordinal position in the program character set corresponding to list of chars",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-ord-min": {
        "prefix":
        "function-ord-min"
    ,
        "body": [
            "function ord-min(${1:char},${2:...})$0"
        ],
        "description": "min. ordinal position in the program character set corresponding to list of chars",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-pi": {
        "prefix":
        "function-pi"
    ,
        "body": [
            "function pi()$0"
        ],
        "description": "pi",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-present-value": {
        "prefix":
        "function-present-value"
    ,
        "body": [
            "function present-value(${1:discount-rate},${2:amount},${3:...})$0"
        ],
        "description": "approximation of the present value of a series of future period-end amount",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-random": {
        "prefix":
        "function-random"
    ,
        "body": [
            "function random(${1:seed})$0"
        ],
        "description": "pseudo-random number 0> <1 from a rectangular distribution with optional seed",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-range": {
        "prefix":
        "function-range"
    ,
        "body": [
            "function range(${1:argument},${2:...})$0"
        ],
        "description": "value of the maximum argument minus the value of the minimum argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-rem": {
        "prefix":
        "function-rem"
    ,
        "body": [
            "function rem(${1:number},${2:divisor})$0"
        ],
        "description": "remainder of number divided by divisor",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-reverse": {
        "prefix":
        "function-reverse"
    ,
        "body": [
            "function reverse(${1:string})$0"
        ],
        "description": "reverse representation with same length of string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-sign": {
        "prefix":
        "function-sign"
    ,
        "body": [
            "function sign(${1:number})$0"
        ],
        "description": "sign representation of number as -1, 0, 1",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-sin": {
        "prefix":
        "function-sin"
    ,
        "body": [
            "function sin(${1:angle})$0"
        ],
        "description": "trigonometric sine of the specified angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-standard-deviation": {
        "prefix":
        "function-standard-deviation"
    ,
        "body": [
            "function standard-deviation(${1:integer})$0"
        ],
        "description": "function to return the standard deviation of its arguments",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-sqrt": {
        "prefix":
        "function-sqrt"
    ,
        "body": [
            "function sqrt(${1:number})$0"
        ],
        "description": "aproximation of the square root of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-sum": {
        "prefix":
        "function-sum"
    ,
        "body": [
            "function sum(${1:integer})$0"
        ],
        "description": "function to return the sum of its arguments",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-tan": {
        "prefix":
        "function-tan"
    ,
        "body": [
            "function tan(${1:angle})$0"
        ],
        "description": "trigonometric tangent of the specified angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-test-numval": {
        "prefix":
        "function-test-numval"
    ,
        "body": [
            "function test-numval(${1:integer})$0"
        ],
        "description": "function to verify the contents of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-test-numval-f": {
        "prefix":
        "function-test-numval-f"
    ,
        "body": [
            "function test-numval-f(${1:integer})$0"
        ],
        "description": "function to verify the contents of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-trim": {
        "prefix":
        "function-trim"
    ,
        "body": [
            "function trim(${1:variable})$0"
        ],
        "description": "function to trim leading and or trailing spaces of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-ulength": {
        "prefix":
        "function-ulength"
    ,
        "body": [
            "function ulength(${1:variable})$0"
        ],
        "description": "function to return the number of UTF8 or UTF16 characters of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-upos": {
        "prefix":
        "function-upos"
    ,
        "body": [
            "function upos(${1:string},${2:integer})$0"
        ],
        "description": "function to return an integer value equal to the position of the nth item in the passed UTF8 or UTF16 argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-upper-case": {
        "prefix":
        "function-upper-case"
    ,
        "body": [
            "function upper-case(${1:variable})$0"
        ],
        "description": "function to return the argument in upper case",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-usubstr": {
        "prefix":
        "function-usubstr"
    ,
        "body": [
            "function usubstr(${1:variable},${2:integer},$(3:integer)$0"
        ],
        "description": "function to return substring of the character data passed that contains UTF8 or UTF16 data",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-usupplementary": {
        "prefix":
        "function-usupplementary"
    ,
        "body": [
            "function usupplementary(${1:variable})$0"
        ],
        "description": "function to return an integer value equating to the index of the first unicode character of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-uvalid": {
        "prefix":
        "function-uvalid"
    ,
        "body": [
            "function uvalid(${1:variable})$0"
        ],
        "description": "function to return an integer value equating to the index of the first invalid unicode character of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-uwidth": {
        "prefix":
        "function-uwidth"
    ,
        "body": [
            "function uwidth(${1:string},${2:integer})$0"
        ],
        "description": "function to return an integer value equal to the width in bytes of the nth item in the passed UTF8 or UTF16 argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-variance": {
        "prefix":
        "function-variance"
    ,
        "body": [
            "function variance(${1:number},${2:...})$0"
        ],
        "description": "statistical variance of the specified list of number argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "function-year-to-yyyy": {
        "prefix":
        "function-year-to-yyyy"
    ,
        "body": [
            "function year-to-yyyy(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0"
        ],
        "description": "convert yy to yyyy with optional yy-cutoff to delineate centuries",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "call": {
        "prefix": "call",
        "body": [
            "call \"$1\" using",
            "    by ${2|value,reference,content|} ${3:identifer}",
            "    returning ${4:return-code}",
            "end-call",
            "$0"
        ],
        "description": "CALL literal"
    },
    "FUNCTION-ABS": {
        "prefix":
        "fUNCTION-ABS"
    ,
        "body": [
            "FUNCTION ABS(${1:number})$0"
        ],
        "description": "function absolute value of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ACOS": {
        "prefix":
        "FUNCTION-ACOS"
    ,
        "body": [
            "FUNCTION ACOS(${1:cosine})$0"
        ],
        "description": "function trigonometric arc-cosine, or inverse cosine, of cosine",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ANNUITY": {
        "prefix":
        "FUNCTION-ANNUITY"
    ,
        "body": [
            "FUNCTION ANNUITY(${1:interest-rate},${2:number-of-periods})$0"
        ],
        "description": "function annuity",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ASIN": {
        "prefix":
        "FUNCTION-ASIN"
    ,
        "body": [
            "FUNCTION ASIN(${1:sine})$0"
        ],
        "description": "function trigonometric arc-sine, or inverse sine, of sine",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ATAN": {
        "prefix":
        "fUNCTION-ATAN"
    ,
        "body": [
            "FUNCTION ATAN(${1:tangent})$0"
        ],
        "description": "function trigonometric arc-tangent, or inverse tangent, of tangent",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-BOOLEAN-OF-INTEGER": {
        "prefix":
        "FUNCTION-BOOLEAN-OF-INTEGER"
    ,
        "body": [
            "FUNCTION BOOLEAN-OF-INTEGER(${1:integer},${2:length})$0"
        ],
        "description": "function boolean item of usage bit representing the binary value of integer; with the given length",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-BYTE-LENGTH": {
        "prefix":
        "FUNCTION-BYTE-LENGTH"
    ,
        "body": [
            "FUNCTION BYTE-LENGTH(${1:integer})$0"
        ],
        "description": "function byte-length (in bytes) of item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-CHAR": {
        "prefix":
        "FUNCTION-CHAR"
    ,
        "body": [
            "FUNCTION CHAR(${1:integer})$0"
        ],
        "description": "function character in the ordinal position specified by integer, from the current alphanumeric collating sequence",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-COS": {
        "prefix":
        "FUNCTION-COS"
    ,
        "body": [
            "FUNCTION COS(${1:angle})$0"
        ],
        "description": "function trigonometric cosine of angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-CURRENCY-SYMBOL": {
        "prefix":
        "FUNCTION-CURRENCY-SYMBOL"
    ,
        "body": [
            "FUNCTION CURRENCY-SYMBOL()$0"
        ],
        "description": "function currency symbol character currently in effect for the locale under which the program is running",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-CURRENT-DATE": {
        "prefix":
        "FUNCTION-CURRENT-DATE"
    ,
        "body": [
            "FUNCTION CURRENT-DATE(${1:date-and-time-format})$0"
        ],
        "description": "function current date and time as 21-character value",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-DATE-OF-INTEGER": {
        "prefix":
        "FUNCTION-DATE-OF-INTEGER"
    ,
        "body": [
            "FUNCTION DATE-OF-INTEGER(${1:integer})$0"
        ],
        "description": "function to convert the integer date to standard date format",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-DATE-TO-YYYYMMDD": {
        "prefix":
        "FUNCTION-DATE-TO-YYYYMMDD"
    ,
        "body": [
            "FUNCTION DATE--TO-YYYYMMDD(${1:integer},${2:integer})$0"
        ],
        "description": "function to convert a date with a 2 digit year to a 4 digit year",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-DAY-OF-INTEGER": {
        "prefix":
        "FUNCTION-DAY-OF-INTEGER"
    ,
        "body": [
            "FUNCTION DAY-OF-INTEGER(${1:integer})$0"
        ],
        "description": "function to convert the integer date to number of days in the gregorian calendar",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-DAY-TO-YYYYDDD": {
        "prefix":
        "FUNCTION-DAY-TO-YYYYDDD"
    ,
        "body": [
            "FUNCTION DATE--TO-YYYYDDD(${1:integer},${2:integer})$0"
        ],
        "description": "function to convert a date with a 2 digit year to a 4 digit year",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-DISPLAY-OF": {
        "prefix":
        "FUNCTION-DISPLAY-OF"
    ,
        "body": [
            "FUNCTION DISPLAY-OF(${1:string},${2:integer})$0"
        ],
        "description": "function to convert an alphanumeric string using a codepage",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-EXP": {
        "prefix":
        "FUNCTION-EXP"
    ,
        "body": [
            "FUNCTION EXP(${1:integer})$0"
        ],
        "description": "function to return e raised to the power of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-EXP10": {
        "prefix":
        "FUNCTION-EXP10"
    ,
        "body": [
            "FUNCTION EXP10(${1:integer})$0"
        ],
        "description": "function to return 10 raised to the power of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-FACTORIAL": {
        "prefix":
        "FUNCTION-FACTORIAL"
    ,
        "body": [
            "FUNCTION FACTORIAL(${1:integer})$0"
        ],
        "description": "function to return the factorial of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-HEX-OF": {
        "prefix":
        "FUNCTION-HEX-OF"
    ,
        "body": [
            "FUNCTION HEX-OF(${1:variable})$0"
        ],
        "description": "function to return hexadecimal representation of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-HEX-TO-CHAR": {
        "prefix":
        "FUNCTION-HEX-TO-CHAR"
    ,
        "body": [
            "FUNCTION HEX-TO-CHAR(${1:variable})$0"
        ],
        "description": "function to return a character string that is a hexadecimal representation of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-INTEGER": {
        "prefix":
        "FUNCTION-INTEGER"
    ,
        "body": [
            "FUNCTION INTEGER(${1:number})$0"
        ],
        "description": "greatest integer value that is less than or equal to number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-INTEGER-OF-DATE": {
        "prefix":
        "FUNCTION-INTEGER-OF-DATE"
    ,
        "body": [
            "FUNCTION INTEGER-OF-DATE(${1:yyyymmdd})$0"
        ],
        "description": "converts yyyymmdd to an internal integer-date",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-INTEGER-OF-DAY": {
        "prefix":
        "FUNCTION-INTEGER-OF-DAY"
    ,
        "body": [
            "FUNCTION INTEGER-OF-DAY(${1:yyyymmdd})$0"
        ],
        "description": "converts yyyymmdd to an internal integer-day",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-INTEGER-PART": {
        "prefix":
        "FUNCTION-INTEGER-PART"
    ,
        "body": [
            "FUNCTION INTEGER-PART(${1:number})$0"
        ],
        "description": "portion of number that occurs to the left of the decimal point",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-LENGTH": {
        "prefix":
        "FUNCTION-LENGTH"
    ,
        "body": [
            "FUNCTION LENGTH(${1:item})$0"
        ],
        "description": "returns the length (in character positions) of the specified item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-LOG": {
        "prefix":
        "FUNCTION-LOG"
    ,
        "body": [
            "FUNCTION LOG(${1:number})$0"
        ],
        "description": "format base e logarithm of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-LOG10": {
        "prefix":
        "FUNCTION-LOG10"
    ,
        "body": [
            "FUNCTION LOG10(${1:number})$0"
        ],
        "description": "format base 10 logarithm of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-LOWERCASE": {
        "prefix":
        "FUNCTION-LOWERCASE"
    ,
        "body": [
            "FUNCTION LOWERCASE(${1:string})$0"
        ],
        "description": "character string that contains string with any uppercase letters replaced by their corresponding lowercase letters",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MAX": {
        "prefix":
        "FUNCTION-MAX"
    ,
        "body": [
            "FUNCTION MAX(${1:number},${2:...})$0"
        ],
        "description": "Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MEAN": {
        "prefix":
        "FUNCTION-MEAN"
    ,
        "body": [
            "FUNCTION MEAN(${1:number},${2:...})$0"
        ],
        "description": "statistical mean value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MEDIAN": {
        "prefix":
        "FUNCTION-MEDIAN"
    ,
        "body": [
            "FUNCTION MEDIAN(${1:number},${2:...})$0"
        ],
        "description": "statistical median value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MIDRANGE": {
        "prefix":
        "FUNCTION-MIDRANGE"
    ,
        "body": [
            "FUNCTION MIDRANGE(${1:number},${2:...})$0"
        ],
        "description": "statistical midrange value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MIN": {
        "prefix":
        "FUNCTION-MIN"
    ,
        "body": [
            "FUNCTION MIN(${1:number},${2:...})$0"
        ],
        "description": "statistical min value of the specified list of numbers",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-MOD": {
        "prefix":
        "FUNCTION-MOD"
    ,
        "body": [
            "FUNCTION MOD(${1:value},${2:modulus})$0"
        ],
        "description": "remainder from the division of value by modulus",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-NATIONAL-OF": {
        "prefix":
        "FUNCTION-NATIONAL-OF"
    ,
        "body": [
            "FUNCTION NATIONAL-OF(${1:alphanumeric-string},${2:replacement-char})$0"
        ],
        "description": "convert alphanumeric-string to the national coded character set representation",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-NUMVAL": {
        "prefix":
        "FUNCTION-NUMVAL"
    ,
        "body": [
            "FUNCTION NUMVAL(${1:string})$0"
        ],
        "description": "corresponding numeric value for string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-NUMVAL-C": {
        "prefix":
        "FUNCTION-NUMVAL-C"
    ,
        "body": [
            "FUNCTION NUMVAL-C(${1:string},${2:currency-symbol}${3:,ANYCASE})$0"
        ],
        "description": "corresponding numeric value for string, case-sensitive if ANYCASE not given",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-NUMVAL-F": {
        "prefix":
        "FUNCTION-NUMVAL-F"
    ,
        "body": [
            "FUNCTION NUMVAL-F(${1:string})$0"
        ],
        "description": "corresponding numeric value for floating-point-string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ORD": {
        "prefix":
        "FUNCTION-ORD"
    ,
        "body": [
            "FUNCTION ORD(${1:char},${2:...})$0"
        ],
        "description": "ordinal position in the program character set corresponding to char",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ORD-MAX": {
        "prefix":
        "fUNCTION-ORD-MAX"
    ,
        "body": [
            "fUNCTION ORD-MAX(${1:char},${2:...})$0"
        ],
        "description": "max. ordinal position in the program character set corresponding to list of chars",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ORD-MIN": {
        "prefix":
        "FUNCTION-ORD-MIN"
    ,
        "body": [
            "FUNCTION ORD-MIN(${1:char},${2:...})$0"
        ],
        "description": "min. ordinal position in the program character set corresponding to list of chars",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-PI": {
        "prefix":
        "FUNCTION-PI"
    ,
        "body": [
            "FUNCTION PI()$0"
        ],
        "description": "pi",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-PRESENT-VALUE": {
        "prefix":
        "fUNCTION-PRESENT-VALUE"
    ,
        "body": [
            "fUNCTION PRESENT-VALUE(${1:discount-rate},${2:amount},${3:...})$0"
        ],
        "description": "approximation of the present value of a series of future period-end amount",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-RANDOM": {
        "prefix":
        "FUNCTION-RANDOM"
    ,
        "body": [
            "FUNCTION RANDOM(${1:seed})$0"
        ],
        "description": "pseudo-random number 0> <1 from a rectangular distribution with optional seed",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-RANGE": {
        "prefix":
        "FUNCTION-RANGE"
    ,
        "body": [
            "FUNCTION RANGE(${1:argument},${2:...})$0"
        ],
        "description": "value of the maximum argument minus the value of the minimum argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-REM": {
        "prefix":
        "FUNCTION-REM"
    ,
        "body": [
            "FUNCTION REM(${1:number},${2:divisor})$0"
        ],
        "description": "remainder of number divided by divisor",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-REVERSE": {
        "prefix":
        "FUNCTION-REVERSE"
    ,
        "body": [
            "FUNCTION REVERSE(${1:string})$0"
        ],
        "description": "reverse representation with same length of string",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-SIGN": {
        "prefix":
        "FUNCTION-SIGN"
    ,
        "body": [
            "FUNCTION SIGN(${1:number})$0"
        ],
        "description": "sign representation of number as -1, 0, 1",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-SIN": {
        "prefix":
        "FUNCTION-SIN"
    ,
        "body": [
            "FUNCTION SIN(${1:angle})$0"
        ],
        "description": "trigonometric sine of the specified angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-STANDARD-DEVIATION": {
        "prefix":
        "FUNCTION STANDARD-DEVIATION"
    ,
        "body": [
            "FUNCTION STANDARD-DEVIATION(${1:integer})$0"
        ],
        "description": "function to return the standard deviation of its arguments",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-SQRT": {
        "prefix":
        "FUNCTION-SQRT"
    ,
        "body": [
            "FUNCTION SQRT(${1:number})$0"
        ],
        "description": "aproximation of the square root of number",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-SUM": {
        "prefix":
        "FUNCTION-SUM"
    ,
        "body": [
            "FUNCTION SUM(${1:integer})$0"
        ],
        "description": "function to return the sum of its arguments",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-TAN": {
        "prefix":
        "FUNCTION-TAN"
    ,
        "body": [
            "FUNCTION TAN(${1:angle})$0"
        ],
        "description": "trigonometric tangent of the specified angle",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-TEST-NUMVAL": {
        "prefix":
        "FUNCTION-TEST-NUMVAL"
    ,
        "body": [
            "FUNCTION TEST-NUMVAL(${1:integer})$0"
        ],
        "description": "function to verify the contents of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-TEST-NUMVAL-F": {
        "prefix":
        "FUNCTION-TEST-NUMVAL-F"
    ,
        "body": [
            "FUNCTION TEST-NUMVAL-F(${1:integer})$0"
        ],
        "description": "function to verify the contents of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-TRIM": {
        "prefix":
        "FUNCTION-TRIM"
    ,
        "body": [
            "FUNCTION TRIM(${1:variable})$0"
        ],
        "description": "function to trim leading and or trailing spaces of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-ULENGTH": {
        "prefix":
        "FUNCTION-ULENGTH"
    ,
        "body": [
            "FUNCTION ULENGTH(${1:variable})$0"
        ],
        "description": "function to return the number of utf8 or utf16 characters of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-UPOS": {
        "prefix":
        "FUNCTION-UPOS"
    ,
        "body": [
            "FUNCTION UPOS(${1:string},${2:integer})$0"
        ],
        "description": "function to return an integer value equal to the position of the nth item in the passed utf8 or utf16 argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-UPPER-CASE": {
        "prefix":
        "FUNCTION-UPPER-CASE"
    ,
        "body": [
            "FUNCTION UPPER-CASE(${1:variable})$0"
        ],
        "description": "function to return the argument in upper case",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-USUBSTR": {
        "prefix":
        "FUNCTION-USUBSTR"
    ,
        "body": [
            "FUNCTION USUBSTR(${1:variable},${2:integer},$(3:integer)$0"
        ],
        "description": "function to return substring of the character data passed that contains utf8 or utf16 data",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-USUPPLEMENTARY": {
        "prefix":
        "FUNCTION-USUPPLEMENTARY"
    ,
        "body": [
            "FUNCTION USUPPLEMENTARY(${1:variable})$0"
        ],
        "description": "function to return an integer value equating to the index of the first unicode character of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-UVALID": {
        "prefix":
        "FUNCTION-UVALID"
    ,
        "body": [
            "FUNCTION UVALID(${1:variable})$0"
        ],
        "description": "function to return an integer value equating to the index of the first invalid unicode character of the argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-UWIDTH": {
        "prefix":
        "FUNCTION-UWIDTH"
    ,
        "body": [
            "FUNCTION UWIDTH(${1:string},${2:integer})$0"
        ],
        "description": "function to return an integer value equal to the width in bytes of the nth item in the passed utf8 or utf16 argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-VARIANCE": {
        "prefix":
        "FUNCTION-VARIANCE"
    ,
        "body": [
            "FUNCTION VARIANCE(${1:number},${2:...})$0"
        ],
        "description": "statistical variance of the specified list of number argument",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "FUNCTION-YEAR-TO-YYYY": {
        "prefix":
        "FUNCTION-YEAR-TO-YYYY"
    ,
        "body": [
            "FUNCTION YEAR-TO-YYYY(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0"
        ],
        "description": "convert yy to yyyy with optional yy-cutoff to delineate centuries",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "GENERATE": {
        "prefix":
        "GENERATE"
    ,
        "body": [
            "GENERATE ${1:id}"
        ],
        "description": "GENERATE ${1:id}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "GIVING": {
        "prefix":
        "GIVING"
    ,
        "body": [
            "GIVING ${1:item}"
        ],
        "description": "GIVING ${1:item}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "GO DEPENDING": {
        "prefix":
        "GO DEPENDING"
    ,
        "body": [
            "GO ${1:procName} DEPENDING ${2:id}"
        ],
        "description": "GO ${1:procName} DEPENDING ${2:id}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "I-O": {
        "prefix":
        "I-O"
    ,
        "body": [
            "I-O ${1:fileName}"
        ],
        "description": "I-O ${1:fileName}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INPUT": {
        "prefix":
        "INPUT"
    ,
        "body": [
            "INPUT ${1:fileName}"
        ],
        "description": "INPUT ${1:fileName}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INPUT PROCEDURE": {
        "prefix":
        "INPUT PROCEDURE"
    ,
        "body": [
            "INPUT PROCEDURE ${1:procName}"
        ],
        "description": "INPUT PROCEDURE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INSPECT CONVERTING": {
        "prefix":
        "INSPECT id CONVERTING"
    ,
        "body": [
            "INPUT PROCEDURE ${1:procName}"
        ],
        "description": "INSPECT CONVERTING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INSPECT": {
        "prefix":
        "INSPECT"
    ,
        "body": [
            "INSPECT ${1:id}"
        ],
        "description": "INSPECT ${1:id}",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INSPECT REPLACING": {
        "prefix":
        "INSPECT REPLACING",
        "body": [
            "INSPECT ${1:id} REPLACING ${2:snip}"
        ],
        "description": "INSPECT REPLACING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },

    "IDENTIFICATION DIVISION": {
        "prefix": "IDENTIFICATION-DIVISION",
        "body": [
            "IDENTIFICATION DIVISION.",
            "$0"
        ],
        "scope": "cobol"
    },
    "identification division": {
        "prefix": "identification-division",
        "body": [
            "identification division.",
            "$0"
        ],
        "scope": "cobol"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:condition}",
            "   $0",
            "end-if"
        ],
        "scope": "cobol"
    },
    "IF": {
        "prefix": "IF",
        "body": [
            "IF ${1:CONDITION}",
            "   $0",
            "END-IF"
        ],
        "scope": "cobol"
    },
    "if else": {
        "prefix": "if",
        "body": [
            "if ${1:condition}",
            "   $0",
            "else",
            "   ",
            "end-if"
        ],
        "scope": "cobol"
    },
    "IF ELSE": {
        "prefix": "IF",
        "body": [
            "IF ${1:CONDITION}",
            "   $0",
            "ELSE",
            "   ",
            "END-IF"
        ],
        "scope": "cobol"
    },
    "inspect converting": {
        "prefix": "inspect",
        "body": [
            "inspect $1 converting '${2:ABCDEFGHIJKLMNOPQRSTUVWXYZ}' to '${3:abcdefghijklmnopqrstuvwxyz}'"
        ],
        "description": "inspect converting",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INTO": {
        "prefix": "INTO",
        "body": [
            "INTO ${1:item}"
        ],
        "description": "INSPECT CONVERTING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "inspect replacing": {
        "prefix": "inspect",
        "body": [
            "inspect $1 replacing all ${2|spaces,zero|} by '${3}'"
        ],
        "description": "inspect replacing",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "inspect tallying": {
        "prefix": "inspect",
        "body": [
            "move 0 to ${2:counter}",
            "inspect ${1:source} tallying ${2:counter} for ${3|all spaces,all $4,characters|}"
        ],
        "description": "Inspect a tallying counter for ...",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INSPECT TALLYING": {
        "prefix": "INSPECT",
        "body": [
            "MOVE 0 to ${2:COUNTER}",
            "INSPECT ${1:SOURCE} TALLYING ${2:COUNTER} FOR ${3|ALL SPACES,ALL $4,CHARACTERS|}"
        ],
        "description": "Inspect a tallying counter for ...",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INVALID": {
        "prefix": "INVALID",
        "body": [
            "INVALID ${1:impStat}"
        ],
        "description": "INVALID",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "INVOKE": {
        "prefix": "INVOKE",
        "body": [
            "INVOKE ${1:id|class|SELF|SUPER} ${2:lit|id|NEW}"
        ],
        "description": "INVOKE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "JSON GENERATE FROM": {
        "prefix": "JSON GENERATE FROM",
        "body": [
            "JSON GENERATE ${1:id} FROM ${2:id}"
        ],
        "description": "JSON GENERATE FROM",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "JSON PARSE INTO": {
        "prefix": "JSON PARSE INTO",
        "body": [
            "JSON PARSE ${1:id} INTO ${2:id}"
        ],
        "description": "JSON PARSE INTO",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "KEY IS": {
        "prefix": "KEY IS",
        "body": [
            "KEY IS ${1:item}"
        ],
        "description": "KEY IS",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "LEADING BY": {
        "prefix": "LEADING BY",
        "body": [
            "LEADING ${1:id|lit} BY ${2:id|lit}"
        ],
        "description": "LEADING BY",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "LEADING": {
        "prefix": "LEADING",
        "body": [
            "LEADING ${1:id|lit}"
        ],
        "description": "LEADING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "LENGTH OF": {
        "prefix": "LENGTH OF",
        "body": [
            "LENGTH OF ${1:id}"
        ],
        "description": "LENGTH OF",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "LOC": {
        "prefix": "LOC",
        "body": [
            "LOC ${1:integer}"
        ],
        "description": "LOC",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "LINKAGE SECTION ": {
        "prefix": "LINKAGE-SECTION",
        "body": [
            "LINKAGE SECTION.",
            "$0"
        ],
        "scope": "cobol"
    },
    "linkage section.": {
        "prefix": "linkage-section",
        "body": [
            "linkage section.",
            "$0"
        ]
    },
    "local-storage section": {
        "prefix": "local-storage",
        "body": [
            "local-storage section.",
            "$0"
        ]
    },
    "main method-id": {
        "prefix": "main",
        "body": [
            "*>> <summary>method main</summary>",
            "method-id main public static.",
            "procedure division using",
            "           by value args as string occurs any.",
            "    $0",
            "end method.",
            ""
        ],
        "description": "method-id (main)",
        "scope": "cobol"
    },
    "method-id": {
        "prefix": "method-id",
        "body": [
            "*>> <summary>method $1</summary>",
            "method-id $1.",
            "procedure division.",
            "    $0",
            "end method.",
            ""
        ],
        "description": "method-id",
        "scope": "cobol"
    },
    "MERGE": {
        "prefix": "MERGE",
        "body": [
            "MERGE ${1:fileName} ${2:snipASC|DESC} ${3:dataName}"
        ],
        "description": "MERGE fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MERGE USING": {
        "prefix": "MERGE USING",
        "body": [
            "MERGE ${1:fileName} ${2:snipASC|DESC} ${3:dataName} USING ${4:fileName} ${5:fileName}"
        ],
        "description": "MERGE USING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MERGE CORR": {
        "prefix": "MERGE CORR",
        "body": ["MOVE CORR ${1:id}"],
        "description": "MERGE USING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MOVE CORR": {
        "prefix": "MOVE CORR",
        "body": ["MOVE CORR ${1:id}"],
        "description": "MOVE CORR",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MOVE CORR TO": {
        "prefix": "MOVE CORR TO",
        "body": ["MOVE CORR ${1:id} TO ${2:id}"],
        "description": "MOVE CORR",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MOVE": {
        "prefix": "MOVE",
        "body": ["MOVE ${1:id|lit}"],
        "description": "MOVE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MOVE TO": {
        "prefix": "MOVE TO",
        "body": ["MOVE ${1:id|lit} TO ${2:id}"],
        "description": "MOVE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "multiply": {
        "prefix": "multiply",
        "body": [
            "multiply ${1:a} by ${2:b} giving ${3:c}"
        ],
        "description": "Multiply a by y giving z",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MULTIPLY": {
        "prefix": "MULTIPLY",
        "body": [
            "MULTIPLY ${1:a} BY ${2:b} GIVING ${3:c}"
        ],
        "description": "MULTIPLY a BY y GIVING z",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MULTIPLY BY": {
        "prefix": "MULTIPLY BY",
        "body": [
            "MULTIPLY ${1:id|lit} BY ${2:id}"
        ],
        "description": "MULTIPLY",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "MULTIPLY BY GIVING": {
        "prefix": "MULTIPLY BY GIVING",
        "body": [
            "MULTIPLY ${1:id|lit} BY ${2:id|lit} GIVING ${3:id}"
        ],
        "description": "MULTIPLY BY GIVING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "NAME IS": {
        "prefix": "NAME IS",
        "body": [
            "NAME ${1:id} IS ${2:lit}"
        ],
        "description": "NAME id IS lit",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "NAMESPACE": {
        "prefix": "NAMESPACE",
        "body": [
            "NAME ${1:id} IS ${2:lit}"
        ],
        "description": "NAMESPACE item *",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "NAMESPACE-PREFIX": {
        "prefix": "NAMESPACE-PREFIX",
        "body": [
            "NAMESPACE ${1:item}"
        ],
        "description": "NAMESPACE-PREFIX item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "NOT INVALID": {
        "prefix": "NAMESPACE-PREFIX",
        "body": [
            "NOT INVALID ${1:impStat}"
        ],
        "description": "NOT INVALID item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OPEN EXTEND": {
        "prefix": "OPEN EXTEND",
        "body": [
            "OPEN EXTEND ${1:fileName}"
        ],
        "description": "OPEN EXTEND fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OPEN I-O": {
        "prefix": "OPEN I-O",
        "body": [
            "OPEN I-O ${1:fileName}"
        ],
        "description": "OPEN I-O fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OPEN INPUT": {
        "prefix": "OPEN INPUT",
        "body": [
            "OPEN INPUT ${1:fileName}"
        ],
        "description": "OPEN INPUT fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OPEN OUTPUT": {
        "prefix": "OPEN OUTPUT",
        "body": [
            "OPEN OUTPUT ${1:fileName}"
        ],
        "description": "OPEN OUTPUT fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OUTPUT": {
        "prefix": "OUTPUT",
        "body": [
            "OUTPUT ${1:fileName}"
        ],
        "description": "OUTPUT fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OVERFLOW": {
        "prefix": "OVERFLOW",
        "body": [
            "OVERFLOW ${1:impStat}"
        ],
        "description": "OVERFLOW impStat",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "OUTPUT PROCEDURE": {
        "prefix": "OUTPUT PROCEDURE",
        "body": [
            "OUTPUT PROCEDURE ${1:procName}"
        ],
        "description": "OUTPUT PROCEDURE fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PARSE": {
        "prefix": "PARSE",
        "body": [
            "PARSE ${1:item}"
        ],
        "description": "PARSE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "perform": {
        "prefix": "perform",
        "body": [
            "perform ${1:paragraph-name} ${2:value-1} times"
        ],
        "description": "perform paragraph x times",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PERFORM": {
        "prefix": "PERFORM",
        "body": [
            "PERFORM ${1:paragraph-name} ${2:value-1} TIMES"
        ],
        "description": "PERFORM paragraph x TIMES",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PERFORM TIMES": {
        "prefix": "PERFORM TIMES",
        "body": [
            "PERFORM ${1:procName} ${2:id|int} TIMES"
        ],
        "description": "PERFORM TIMES procedureName x TIMES",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "perform-end-perform": {
        "prefix": "perform",
        "body": [
            "perform ${1}",
            "\t${2}",
            "end-perform",
            "${0}"
        ],
        "description": "perform .. end-perform",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PERFORM-END-PERFORM": {
        "prefix": "PERFORM",
        "body": [
            "PERFORM ${1}",
            "\t${2}",
            "END-PERFORM",
            "${0}"
        ],
        "description": "PERFORM .. END-PERFORM",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "perform varying": {
        "prefix": "perform",
        "body": [
            "perform ${1:paragraph-name} varying ${2:field-1}",
            " from ${3:value-1} by ${4:value-2}",
            " until ${5:condition}",
            "$0"
        ],
        "description": "inline perform varying",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PERFORM VARYING": {
        "prefix": "PERFORM",
        "body": [
            "PERFORM ${1:paragraph-name} VARYING ${2:field-1}",
            " FROM ${3:value-1} BY ${4:value-2}",
            " UNTIL ${5:condition}",
            "$0"
        ],
        "description": "INLINE PERFORM VARYING",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "POINTER": {
        "prefix": "POINTER",
        "body": [
            "POINTER ${1:item}"
        ],
        "description": "POINTER item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "PROCEDURE DIVISION": {
        "prefix": "PROCEDURE-DIVISION",
        "body": [
            "PROCEDURE DIVISION.",
            "$0"
        ]
    },
    "procedure division": {
        "prefix": "procedure-division",
        "body": [
            "procedure division.",
            "$0"
        ],
        "scope": "cobol"
    },
    "PROGRAM-ID": {
        "prefix": "PROGRAM-ID.",
        "body": [
            "PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/${1:/upcase}/}}.",
            "$0"
        ],
        "scope": "cobol"
    },
    "program-id": {
        "prefix": "program-id. ",
        "body": [
            "program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
            "$0"
        ],
        "scope": "cobol"
    },
    "property": {
        "prefix": "property",
        "body": [
            "01 ${2:_prop} ${3:binary-long} private.",
            "method-id. get property #${1:Prop}.",
            "procedure division returning ret as ${3:binary-long}.",
            "    set ret to ${2:_prop}",
            "end method.",
            "method-id. set property #${1:Prop}.",
            "procedure division using by value val as ${3:binary-long}.",
            "    set ${2:_prop} to 0",
            "end method.",
            ""
        ],
        "description": "set/get property",
        "scope": "cobol"
    },
    "READ": {
        "prefix": "READ",
        "body": [
            "READ ${1:fileName}"
        ],
        "description": "READ fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "RELEASE": {
        "prefix": "RELEASE",
        "body": [
            "RELEASE ${1:recordName}"
        ],
        "description": "RELEASE recordName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "REPLACING": {
        "prefix": "REPLACING",
        "body": [
            "RELEASE ${1:item}"
        ],
        "description": "REPLACING item ",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "RETURN": {
        "prefix": "RETURN",
        "body": [
            "RETURN ${1:fileName}"
        ],
        "description": "REPLACING fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "RETURNING": {
        "prefix": "RETURNING",
        "body": [
            "RETURNING ${1:dataName}"
        ],
        "description": "RETURNING dataName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "REWRITE": {
        "prefix": "REWRITE",
        "body": [
            "REWRITE ${1:recordName}"
        ],
        "description": "REWRITE dataName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SEARCH ALL WHEN": {
        "prefix": "SEARCH ALL WHEN",
        "body": [
            "RSEARCH ALL ${1:item} WHEN ${2:item} EQUAL ${3:item} ${4:item}"
        ],
        "description": "REWRITE dataName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SEARCH WHEN": {
        "prefix": "SEARCH WHEN",
        "body": [
            "SEARCH ${1:item} WHEN ${2:condition} ${3:item}"
        ],
        "description": "SEARCH WHEN",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SEQUENCE": {
        "prefix": "SEQUENCE",
        "body": [
            "SEQUENCE ${1:item}"
        ],
        "description": "SEQUENCE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SET": {
        "prefix": "SET",
        "body": [
            "SET ${1:item}"
        ],
        "description": "SET",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SORT": {
        "prefix": "SORT",
        "body": [
            "SORT ${1:fileName} ${2:snipOrdering} ${3:snip} ${4:snip}"
        ],
        "description": "SORT",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "START": {
        "prefix": "START",
        "body": [
            "START ${1:fileName}"
        ],
        "description": "START",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SUPPRESS": {
        "prefix": "SUPPRESS",
        "body": [
            "SUPPRESS ${1:id}"
        ],
        "description": "SUPPRESS",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },

    "STOP": {
        "prefix": "STOP",
        "body": [
            "STOP ${1:RUN|literal}"
        ],
        "description": "STOP",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SIZE ERROR": {
        "prefix": "SIZE ERROR",
        "body": [
            "SIZE ERROR ${1:impStat}"
        ],
        "description": "SIZE ERROR",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "shell": {
        "prefix": "shell",
        "body": [
            "       IDENTIFICATION DIVISION.",
            "       PROGRAM-ID. ${1:${1:${TM_FILENAME/(.*)\\..+$/$1/}}}.",
            "       ENVIRONMENT DIVISION.",
            "       CONFIGURATION SECTION.",
            "       SPECIAL-NAMES.",
            "       INPUT-OUTPUT SECTION.",
            "       FILE-CONTROL.",
            "       DATA DIVISION.",
            "        FILE SECTION.",
            "        WORKING-STORAGE SECTION.",
            "        LINKAGE SECTION.",
            "       PROCEDURE DIVISION.",
            "        main-processing SECTION.",
            "         mainline-paragraph.",
            "             $0",
            "             STOP RUN."
        ],
        "description": "Template Program",
        "scope": "cobol"
    },
    "subtract": {
        "prefix": "subtract",
        "body": [
            "subtract ${1:a} from ${2:b} giving ${3:c}"
        ],
        "description": "subtract a from b giving c",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "SUBTRACT": {
        "prefix": "SUBTRACT",
        "body": [
            "SUBTRACT ${1:a} FROM ${2:b} GIVING ${3:c}"
        ],
        "description": "SUBTRACT a FROM b GIVING c",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "string": {
        "prefix": "string",
        "body": [
            "string ${1:item1} delimited by size",
            "       ${2:item2} delimited by size",
            "       into ${3:result}",
            "end-string",
            "$0"
        ],
        "description": "string delimited by size",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "STRING": {
        "prefix": "STRING",
        "body": [
            "STRING ${1:item1} DELIMITED BY SIZE",
            "       ${2:item2} DELIMITED BY SIZE",
            "       INTO ${3:result}",
            "END-STRING",
            "$0"
        ],
        "description": "string delimited by size",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "TALLYING": {
        "prefix": "TALLYING",
        "body": [
            "TALLYING ${1:item}"
        ],
        "description": "TALLYING item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "THROUGH": {
        "prefix": "THROUGH",
        "body": [
            "THROUGH ${1:item}"
        ],
        "description": "THROUGH item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "THRU": {
        "prefix": "THRU",
        "body": [
            "THRU ${1:item}"
        ],
        "description": "THRU item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "TO": {
        "prefix": "TO",
        "body": [
            "TO ${1:item}"
        ],
        "description": "TO item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "TO item1 item2": {
        "prefix": "TO item1 item2",
        "body": [
            "TO ${1:item} ${2:item}"
        ],
        "description": "TO item1 item2",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "TYPE": {
        "prefix": "TYPE item1 item2",
        "body": [
            "TYPE ${1:item} ${2:snip}"
        ],
        "description": "TYPE item1 item2",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "UNSTRING": {
        "prefix": "UNSTRING item1",
        "body": [
            "UNSTRING ${1:item}"
        ],
        "description": "TYPE item1 item2",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "UNTIL": {
        "prefix": "UNTIL",
        "body": [
            "UNTIL ${1:item}"
        ],
        "description": "UNTIL item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "UP BY": {
        "prefix": "UP BY",
        "body": [
            "UP BY ${1:item}"
        ],
        "description": "UP BY item1",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "UPON": {
        "prefix": "UPON",
        "body": [
            "UPON ${1:mnemName|envName}"
        ],
        "description": "UPON mnemName|envName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "USING": {
        "prefix": "USING",
        "body": [
            "USING ${1:fileName} ${2:fileName}"
        ],
        "description": "USING fileName fileName",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "USING VALUE": {
        "prefix": "USING",
        "body": [
            "USING VALUE ${1:id}"
        ],
        "description": "USING VALUE",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "VALIDATING": {
        "prefix": "VALIDATING",
        "body": [
            "VALIDATING ${1:item}"
        ],
        "description": "VALIDATING item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "VALUE": {
        "prefix": "VALUE",
        "body": [
            "VALUE ${1:id}"
        ],
        "description": "VALUE id",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "VARYING FROM": {
        "prefix": "VARYING FROM",
        "body": [
            "VARYING ${1:item} FROM ${2:item} ${3:snipByUntil}"
        ],
        "description": "VARYING FROM",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "WHEN": {
        "prefix": "WHEN",
        "body": [
            "WHEN ${1:snipPhrase} ${2:impStat}"
        ],
        "description": "WHEN item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "WHEN OTHER": {
        "prefix": "WHEN OTHER",
        "body": [
            "WHEN OTHER ${1:impStat}"
        ],
        "description": "VARYING FROM",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "WRITE": {
        "prefix": "WRITE item",
        "body": [
            "WRITE ${1:item}"
        ],
        "description": "WRITE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "XML GENERATE": {
        "prefix": "XML GENERATE",
        "body": [
            "XML GENERATE ${1:item}"
        ],
        "description": "XML GENERATE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "XML PARSE": {
        "prefix": "XML PARSE",
        "body": [
            "XML PARSE ${1:item}"
        ],
        "description": "XML PARSE item",
        "scope": "cobol,acucobol,opencobol,gnucobol"
    },
    "working-storage section": {
        "prefix": "working-storage",
        "body": [
            "working-storage section.",
            "$0"
        ],
        "scope": "cobol"
    },
    "WORKING-STORAGE SECTION": {
        "prefix": "WORKING-STORAGE",
        "body": [
            "WORKING-STORAGE SECTION.",
            "$0"
        ]
    },
    "IDMS-CONTROL SECTION": {
        "prefix": "IDMS-CONTROL-SECTION",
        "body": [
            "IDMS-CONTROL SECTION.",
            "PROTOCOL. MODE IS ${1:operating-mode}."
        ],
        "description": "[IDMS] idms-control section",
        "scope": "cobol"
    },
    "SCHEMA SECTION": {
        "prefix": "SCHEMA-SECTION [IDMS]",
        "body": [
            "SCHEMA SECTION.",
            "DB ${1:subschema-name} WITHIN ${2:schema-name}."
        ],
        "description": "schema section",
        "scope": "cobol"
    },
    "MAP SECTION": {
        "prefix": "MAP-SECTION [IDMS]",
        "body": [
            "MAP SECTION.",
            "MAX FIELD LIST IS ${1:field-list-size}.",
            "MAP ${2:map-name}."
        ],
        "description": "map section",
        "scope": "cobol"
    },
    "COPY IDMS": {
        "prefix": "COPY-IDMS",
        "body": [
            "COPY IDMS ${1:idms-entity}."
        ],
        "description": "copy idms",
        "scope": "cobol"
    },
    "COPY IDMS FILE": {
        "prefix": "COPY-IDMS-FILE",
        "body": [
            "COPY IDMS FILE ${1:file-name}."
        ],
        "description": "copy idms file",
        "scope": "cobol"
    },
    "COPY IDMS RECORD": {
        "prefix": "COPY-IDMS-RECORD",
        "body": [
            "COPY IDMS RECORD ${1:record-name}."
        ],
        "description": "copy idms record",
        "scope": "cobol"
    },
    "COPY IDMS MAP": {
        "prefix": "COPY-IDMS-MAP",
        "body": [
            "COPY IDMS MAP ${1:map-name}."
        ],
        "description": "copy idms map",
        "scope": "cobol"
    },
    "COPY IDMS MAP-CONTROL": {
        "prefix": "COPY-MAP-CONTROL [IDMS]",
        "body": [
            "COPY IDMS MAP-CONTROL ${1:map-name}."
        ],
        "description": "copy idms map control",
        "scope": "cobol"
    },
    "COPY IDMS MODULE": {
        "prefix": "COPY-IDMS-MODULE",
        "body": [
            "COPY IDMS MODULE ${1:module-name}."
        ],
        "description": "copy idms module",
        "scope": "cobol"
    },
    "shell-idms": {
        "prefix": "shell-idms",
        "body": [
            "       IDENTIFICATION DIVISION.",
            "       PROGRAM-ID. ${1:${1:${TM_FILENAME/(.*)\\..+$/$1/}}}.",
            "       ENVIRONMENT DIVISION.",
            "       IDMS-CONTROL SECTION.",
            "       PROTOCOL. MODE IS ${2:operating-mode}.",
            "       DATA DIVISION.",
            "       FILE SECTION.",
            "       SCHEMA SECTION.",
            "       DB ${3:subschema-name} WITHIN ${4:schema-name}.",
            "       MAP SECTION.",
            "       MAX FIELD LIST IS ${5:field-list-size}.",
            "       MAP ${6:map-name}.",
            "       WORKING-STORAGE SECTION.",
            "       COPY IDMS ${7:idms-entity}.",
            "       LINKAGE SECTION.",
            "       PROCEDURE DIVISION.",
            "        main-processing SECTION.",
            "         mainline-paragraph.",
            "             $0",
            "             STOP RUN."
        ],
        "description": "Template Program",
        "scope": "cobol"
    }
}
